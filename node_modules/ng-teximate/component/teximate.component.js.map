{"version":3,"sources":["../inlined/component/teximate.component.ts"],"names":[],"mappings":"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","file":"teximate.component.js","sourceRoot":"","sourcesContent":["import { Component, OnChanges, Input, Renderer2, ElementRef, SimpleChanges, ChangeDetectionStrategy, OnDestroy } from '@angular/core';\nimport { TeximateOptions, TeximateOrder, TeximateHover } from '../helper/teximate.class';\nimport { TeximateService } from '../service/teximate.service';\n\n\nexport class TeximateComponent implements OnChanges, OnDestroy {\n\n  style: HTMLElement;\n\n  jobText: string = 'Teximate is working';\n\n  jobHover: TeximateHover = {\n    type: 'off',\n    in: undefined,\n    out: undefined\n  };\n\n  /** Default effect */\n  jobEffect: TeximateOptions = {\n    type: 'letter',\n    animation: { name: 'fadeIn', duration: 300 },\n    word: { type: TeximateOrder.SEQUENCE, delay: 100 },\n    letter: { type: TeximateOrder.SHUFFLE, delay: 50 }\n  };\n\n   text: string;\n\n   hover;\n\n   effect;\n\n  constructor(public teximate: TeximateService, private renderer: Renderer2, el: ElementRef) {\n\n    /** create dynamic style (to avoid applying css rules' vendors for each element in the template) */\n    this.style = this.renderer.createElement('style');\n    this.renderer.appendChild(el.nativeElement, this.style);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n\n    let reload: boolean = changes['text'] && changes['text'].firstChange;\n\n    if (changes['text'] && changes['text'].currentValue) {\n\n      this.jobText = changes['text'].currentValue;\n      reload = true;\n    }\n\n    if (changes['hover'] && changes['hover'].currentValue) {\n      this.jobHover = Object.assign({}, this.jobEffect, changes['hover'].currentValue);\n      reload = true;\n    }\n\n    if (changes['effect']) {\n\n      this.jobEffect = Object.assign({}, this.jobEffect, changes['effect'].currentValue);\n      this.setAnimationDuration(changes['effect'].currentValue.animation.duration);\n      if (!changes['effect'].firstChange && changes['effect'].previousValue.type !== changes['effect'].currentValue.type) {\n        reload = true;\n      }\n    }\n\n    if (reload) {\n      this.teximate.createEffect(this.jobText, this.jobEffect, this.jobHover);\n    } else {\n      this.teximate.runEffect(this.jobEffect);\n    }\n  }\n\n  /** \n    * Run effect to the existing text\n    * (using component ref) e.g. :\n    * ViewChild(TeximateComponent) tx;\n    * tx.runEffect(options);\n    */\n  runEffect(options: TeximateOptions) {\n\n    this.teximate.runEffect(options);\n  }\n\n  setAnimationDuration(duration) {\n    this.renderer.setProperty(this.style, 'innerHTML', `\n      .animated {\n        animation-duration: ${duration}ms;\n        -webkit-animation-duration: ${duration}ms;\n        -moz-animation-duration: ${duration}ms;\n        -o-animation-duration: ${duration}ms;\n        -ms-animation-duration: ${duration}ms;\n      }\n    `);\n  }\n\n  ngOnDestroy() {\n    this.teximate.text.unsubscribe();\n    this.teximate.worker.unsubscribe();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'teximate',\n  template: \"\\n    <span aria-label=\\\"text\\\">\\n\\n      <p *ngFor=\\\"let line of teximate.text | async\\\" [class]=\\\"'line' + line.class\\\" [style.visibility]=\\\"line.visibility\\\">\\n\\n        <span *ngFor=\\\"let word of line.words\\\" [class]=\\\"'word' + word.class + word.animateClass\\\"\\n         [style.visibility]=\\\"word.visibility\\\" (mouseover)=\\\"word.hover()\\\">\\n\\n          <span *ngFor=\\\"let letter of word.letters\\\" [class]=\\\"'letter' + letter.class + letter.animateClass\\\"\\n           [style.visibility]=\\\"letter.visibility\\\" (mouseover)=\\\"letter.hover()\\\">\\n            {{letter.text}}\\n          </span>\\n\\n        </span>\\n      </p>\\n\\n    </span>\\n  \",\n  styles: [\"\\n    .letter,.word{display:inline-block;transform:translateZ(0);-moz-transform:translateZ(0);-o-transform:translateZ(0);-webkit-transform:translateZ(0)}.word{margin-right:8px}\\n  \"],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  viewProviders: [TeximateService]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TeximateService, },\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'text': [{ type: Input },],\n'hover': [{ type: Input },],\n'effect': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}