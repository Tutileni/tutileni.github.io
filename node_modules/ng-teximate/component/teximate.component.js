import { Component, Input, Renderer2, ElementRef, ChangeDetectionStrategy } from '@angular/core';
import { TeximateOrder } from '../helper/teximate.class';
import { TeximateService } from '../service/teximate.service';
var TeximateComponent = (function () {
    function TeximateComponent(teximate, renderer, el) {
        this.teximate = teximate;
        this.renderer = renderer;
        this.jobText = 'Teximate is working';
        this.jobHover = {
            type: 'off',
            in: undefined,
            out: undefined
        };
        /** Default effect */
        this.jobEffect = {
            type: 'letter',
            animation: { name: 'fadeIn', duration: 300 },
            word: { type: TeximateOrder.SEQUENCE, delay: 100 },
            letter: { type: TeximateOrder.SHUFFLE, delay: 50 }
        };
        /** create dynamic style (to avoid applying css rules' vendors for each element in the template) */
        this.style = this.renderer.createElement('style');
        this.renderer.appendChild(el.nativeElement, this.style);
    }
    TeximateComponent.prototype.ngOnChanges = function (changes) {
        var reload = changes['text'] && changes['text'].firstChange;
        if (changes['text'] && changes['text'].currentValue) {
            this.jobText = changes['text'].currentValue;
            reload = true;
        }
        if (changes['hover'] && changes['hover'].currentValue) {
            this.jobHover = Object.assign({}, this.jobEffect, changes['hover'].currentValue);
            reload = true;
        }
        if (changes['effect']) {
            this.jobEffect = Object.assign({}, this.jobEffect, changes['effect'].currentValue);
            this.setAnimationDuration(changes['effect'].currentValue.animation.duration);
            if (!changes['effect'].firstChange && changes['effect'].previousValue.type !== changes['effect'].currentValue.type) {
                reload = true;
            }
        }
        if (reload) {
            this.teximate.createEffect(this.jobText, this.jobEffect, this.jobHover);
        }
        else {
            this.teximate.runEffect(this.jobEffect);
        }
    };
    /**
      * Run effect to the existing text
      * (using component ref) e.g. :
      * ViewChild(TeximateComponent) tx;
      * tx.runEffect(options);
      */
    TeximateComponent.prototype.runEffect = function (options) {
        this.teximate.runEffect(options);
    };
    TeximateComponent.prototype.setAnimationDuration = function (duration) {
        this.renderer.setProperty(this.style, 'innerHTML', "\n      .animated {\n        animation-duration: " + duration + "ms;\n        -webkit-animation-duration: " + duration + "ms;\n        -moz-animation-duration: " + duration + "ms;\n        -o-animation-duration: " + duration + "ms;\n        -ms-animation-duration: " + duration + "ms;\n      }\n    ");
    };
    TeximateComponent.prototype.ngOnDestroy = function () {
        this.teximate.text.unsubscribe();
        this.teximate.worker.unsubscribe();
    };
    return TeximateComponent;
}());
export { TeximateComponent };
TeximateComponent.decorators = [
    { type: Component, args: [{
                selector: 'teximate',
                template: "\n    <span aria-label=\"text\">\n\n      <p *ngFor=\"let line of teximate.text | async\" [class]=\"'line' + line.class\" [style.visibility]=\"line.visibility\">\n\n        <span *ngFor=\"let word of line.words\" [class]=\"'word' + word.class + word.animateClass\"\n         [style.visibility]=\"word.visibility\" (mouseover)=\"word.hover()\">\n\n          <span *ngFor=\"let letter of word.letters\" [class]=\"'letter' + letter.class + letter.animateClass\"\n           [style.visibility]=\"letter.visibility\" (mouseover)=\"letter.hover()\">\n            {{letter.text}}\n          </span>\n\n        </span>\n      </p>\n\n    </span>\n  ",
                styles: ["\n    .letter,.word{display:inline-block;transform:translateZ(0);-moz-transform:translateZ(0);-o-transform:translateZ(0);-webkit-transform:translateZ(0)}.word{margin-right:8px}\n  "],
                changeDetection: ChangeDetectionStrategy.OnPush,
                viewProviders: [TeximateService]
            },] },
];
/** @nocollapse */
TeximateComponent.ctorParameters = function () { return [
    { type: TeximateService, },
    { type: Renderer2, },
    { type: ElementRef, },
]; };
TeximateComponent.propDecorators = {
    'text': [{ type: Input },],
    'hover': [{ type: Input },],
    'effect': [{ type: Input },],
};
//# sourceMappingURL=teximate.component.js.map