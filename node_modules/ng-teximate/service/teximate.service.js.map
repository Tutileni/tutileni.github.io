{"version":3,"sources":["../inlined/service/teximate.service.ts"],"names":[],"mappings":"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","file":"teximate.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/mergeAll';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/operator/delay';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/takeWhile';\nimport 'rxjs/add/operator/catch';\n\nimport 'rxjs/add/observable/from';\nimport 'rxjs/add/observable/of';\n\nimport { Helper } from '../helper/teximate.helper';\nimport { TeximateOptions, TeximateOrder, TeximateHover, Line, Word, Letter } from '../helper/teximate.class';\n\n/** This service is not meant to be used outside TeximateModule\n *  Each component instance has service instance\n */\n\nexport class TeximateService {\n\n  /** The processed text */\n  arr: Line[] = [];\n  /** A worker to do the job async */\n  worker = new Subject();\n  /** A state used to update the template */\n  text = new Subject();\n\n  constructor() {\n\n    this.worker\n      .takeWhile(() => !this.text.closed)\n      .switchMap((job: any) => {\n        // console.log('worker execute:', job.type);\n\n        return (job.options.type === 'letter') ?\n          this.lettersJob(job.options) :\n          this.wordsJob(job.options);\n      })\n      .catch(res => {\n        console.log('[Teximate]:', res);\n        return Observable.of(null)\n      })\n      .subscribe();\n  }\n\n  /** Run effect on a new text */\n  createEffect(text: string, options: TeximateOptions, hover?: TeximateHover) {\n\n    // Get a processed text to work with\n    this.arr = this.textFactory(text, options, hover);\n\n    // Send the job to the worker\n    this.worker.next({ options: options, hover: hover });\n  }\n\n  /** Run effect on an existing text */\n  runEffect(options: TeximateOptions) {\n\n    this.worker.next({ options: options });\n  }\n\n  /** The magic that runs the effect on letters */\n  lettersJob(options: TeximateOptions): Observable<any> {\n\n    return Observable.from(this.arr)\n      .mergeMap((line: any) => {\n\n        // A temp variable used to calculate word's index relative to letters sequence\n        let relativeIndex = 0;\n\n        // Shuffle words if shuffle is ordered\n        let lineWords = (options.word.type === TeximateOrder.SHUFFLE) ? Helper.shuffle(line.words.slice(0)) : line.words;\n\n        return Observable.of(lineWords)\n          .mergeAll()\n          .mergeMap((wordItem: Word, j) => {\n\n            // Process word (calculate index & delay according to word's type)\n            const word = Helper.processWord(options, lineWords, j, relativeIndex);\n\n            // Set the index for the next word relative to letter sequence\n            relativeIndex += word.letters.length;\n\n            // Shuffle letters if letter type is shuffle\n            let wordLetters;\n            if (options.letter.type === TeximateOrder.SHUFFLE) {\n              wordLetters = Helper.shuffle(word.letters.slice());\n            } else {\n              wordLetters = word.letters;\n            }\n\n            return Observable.of(wordLetters).delay(word.delay)\n              .mergeAll()\n              .mergeMap((letterInstance, k) => {\n\n                /** Process letter (calculate index & delay according to requested order) */\n                const letter = Helper.processLetter(options, wordLetters, k);\n\n                return Observable.of(letter.item).delay(letter.delay)\n                  .do((letterItem: Letter) => this.updateItem(letterItem, options))\n              });\n          });\n      });\n  }\n\n  /** The magic that runs the effect on words */\n  wordsJob(options: TeximateOptions): Observable<any> {\n\n    return Observable.from(this.arr)\n      .mergeMap((line: any, i) => {\n\n        // Shuffle words if shuffle is ordered\n        let lineWords = (options.word.type === TeximateOrder.SHUFFLE) ? Helper.shuffle(line.words.slice(0)) : line.words;\n\n        return Observable.of(lineWords)\n          .mergeAll()\n          .mergeMap((wordItem: Word, j) => {\n\n            // Process word (calculate index & delay according to word's type)\n            // in this case `options.letter.delay` must be 0\n            const word = Helper.processWord(options, lineWords, j, 0);\n\n            return Observable.of(word)\n              .delay(word.delay)\n              .do(() => this.updateItem(wordItem, options));\n          });\n      });\n  }\n\n  updateItem(item: Letter | Word, options: TeximateOptions) {\n    /** Display the letter */\n    item.visibility = 'visible';\n\n    /** Set animation class */\n    item.animateClass = ` animated ${options.animation.name}`;\n\n    /** Update the array */\n    this.text.next(this.arr);\n  }\n\n  /** Set word/letter hover animation */\n  setItemHover(item: Letter | Word, options: TeximateOptions, hover: TeximateHover) {\n\n    return () => {\n      /** hover in effect */\n      item.animateClass = ` animated ${(hover.in) ? hover.in : ''}`;\n      /** hover out effect */\n      setTimeout(() => {\n        item.animateClass = ` animated ${(hover.out) ? hover.out : ''}`;\n        this.text.next(this.arr);\n      }, options.animation.duration);\n    };\n\n  }\n\n  /** Process and convert text string into a workable text */\n  textFactory(text: string, options: TeximateOptions, hover: TeximateHover) {\n\n    const linesArr: Line[] = [];\n    /** get text's lines */\n    const lines = text.split('\\n');\n    lines.map((line, i) => {\n\n      const wordArr: Word[] = [];\n      /** get line's words and filter empty words */\n      const words = line.split(' ');\n      words.filter(word => word !== '').map((word, j) => {\n\n        const letterArr: Letter[] = [];\n        /** get word's letters */\n        const letters = word.split(/(?!$)/u);\n        letters.map((letter, k) => {\n\n          const letterItem: Letter = {\n            text: letter,\n            class: ' letter' + (k + 1),\n            animateClass: ' animated ',\n            visibility: (options.type === 'word') ? 'visible' : 'hidden',\n            hover: () => {\n            }\n          };\n          if (hover.type === 'letter') {\n            letterItem.hover = this.setItemHover(letterItem, options, hover);\n          }\n          letterArr.push(letterItem);\n        });\n\n        const wordItem: Word = {\n          letters: letterArr,\n          class: ' word' + (j + 1),\n          animateClass: ' animated ',\n          visibility: 'hidden',\n          hover: () => {\n          }\n        };\n        if (hover.type === 'word') {\n          wordItem.hover = this.setItemHover(wordItem, options, hover);\n        }\n        wordArr.push(wordItem);\n      });\n\n      linesArr.push({\n        words: wordArr,\n        class: ' line' + (i + 1),\n        visibility: 'hidden'\n      });\n    });\n    return linesArr;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}