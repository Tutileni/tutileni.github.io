import { Observable } from 'rxjs/Observable';
import { Subject } from 'rxjs/Subject';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/do';
import 'rxjs/add/operator/mergeAll';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/delay';
import 'rxjs/add/operator/switchMap';
import 'rxjs/add/operator/takeWhile';
import 'rxjs/add/operator/catch';
import 'rxjs/add/observable/from';
import 'rxjs/add/observable/of';
import { TeximateOptions, TeximateHover, Line, Word, Letter } from '../helper/teximate.class';
/** This service is not meant to be used outside TeximateModule
 *  Each component instance has service instance
 */
export declare class TeximateService {
    /** The processed text */
    arr: Line[];
    /** A worker to do the job async */
    worker: Subject<{}>;
    /** A state used to update the template */
    text: Subject<{}>;
    constructor();
    /** Run effect on a new text */
    createEffect(text: string, options: TeximateOptions, hover?: TeximateHover): void;
    /** Run effect on an existing text */
    runEffect(options: TeximateOptions): void;
    /** The magic that runs the effect on letters */
    lettersJob(options: TeximateOptions): Observable<any>;
    /** The magic that runs the effect on words */
    wordsJob(options: TeximateOptions): Observable<any>;
    updateItem(item: Letter | Word, options: TeximateOptions): void;
    /** Set word/letter hover animation */
    setItemHover(item: Letter | Word, options: TeximateOptions, hover: TeximateHover): () => void;
    /** Process and convert text string into a workable text */
    textFactory(text: string, options: TeximateOptions, hover: TeximateHover): Line[];
}
